"""empty message

Revision ID: a0dde78b6384
Revises: 
Create Date: 2020-05-16 12:49:16.715862

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a0dde78b6384'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('footprint_ref',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('footprint_path', sa.String(length=300), nullable=True),
    sa.Column('footprint_ref', sa.String(length=150), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('library_ref',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('symbol_path', sa.String(length=300), nullable=True),
    sa.Column('symbol_ref', sa.String(length=150), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('component',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('mpn', sa.String(length=100), nullable=False),
    sa.Column('manufacturer', sa.String(length=100), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('value', sa.String(length=100), nullable=True),
    sa.Column('package', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('comment', sa.String(length=100), nullable=True),
    sa.Column('is_through_hole', sa.Boolean(), nullable=True),
    sa.Column('library_ref_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['library_ref_id'], ['library_ref.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mpn', 'manufacturer', name='_mpn_manufacturer_uc')
    )
    op.create_index(op.f('ix_component_manufacturer'), 'component', ['manufacturer'], unique=False)
    op.create_index(op.f('ix_component_mpn'), 'component', ['mpn'], unique=False)
    op.create_table('capacitor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tolerance', sa.String(length=30), nullable=True),
    sa.Column('voltage', sa.String(length=30), nullable=True),
    sa.Column('composition', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('component_footprint_asc',
    sa.Column('component_id', sa.Integer(), nullable=True),
    sa.Column('footprint_ref_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['component_id'], ['component.id'], ),
    sa.ForeignKeyConstraint(['footprint_ref_id'], ['footprint_ref.id'], )
    )
    op.create_table('connector_pcb',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('orientation', sa.String(length=50), nullable=True),
    sa.Column('pitch', sa.String(length=30), nullable=True),
    sa.Column('voltage_rating', sa.String(length=30), nullable=True),
    sa.Column('current_rating', sa.String(length=30), nullable=True),
    sa.Column('number_of_rows', sa.String(length=30), nullable=True),
    sa.Column('number_of_contacts', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('crystal_oscillator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('load_capacitance', sa.String(length=30), nullable=True),
    sa.Column('frequency', sa.String(length=30), nullable=True),
    sa.Column('frequency_tolerance', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('diode_rectifier',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('forward_voltage', sa.String(length=30), nullable=True),
    sa.Column('reverse_current_leakage', sa.String(length=30), nullable=True),
    sa.Column('max_forward_average_current', sa.String(length=30), nullable=True),
    sa.Column('max_reverse_vrrm', sa.String(length=30), nullable=True),
    sa.Column('diode_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('diode_tvs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voltage_reverse_standoff', sa.String(length=30), nullable=True),
    sa.Column('voltage_breakdown_min', sa.String(length=30), nullable=True),
    sa.Column('voltage_clamping_max', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('diode_zener',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tolerance', sa.String(length=30), nullable=True),
    sa.Column('power_max', sa.String(length=30), nullable=True),
    sa.Column('voltage_forward', sa.String(length=30), nullable=True),
    sa.Column('voltage_zener', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ferrite_bead',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number_of_lines', sa.String(length=30), nullable=True),
    sa.Column('dc_resistance', sa.String(length=30), nullable=True),
    sa.Column('impedance_freq', sa.String(length=30), nullable=True),
    sa.Column('current_rating', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('led_indicator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('forward_voltage', sa.String(length=30), nullable=True),
    sa.Column('color', sa.String(length=30), nullable=True),
    sa.Column('lens_style', sa.String(length=50), nullable=True),
    sa.Column('lens_transparency', sa.String(length=30), nullable=True),
    sa.Column('dominant_wavelength', sa.String(length=30), nullable=True),
    sa.Column('test_current', sa.String(length=30), nullable=True),
    sa.Column('lens_size', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('memory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('technology', sa.String(length=50), nullable=True),
    sa.Column('memory_type', sa.String(length=50), nullable=True),
    sa.Column('size', sa.String(length=30), nullable=True),
    sa.Column('interface', sa.String(length=50), nullable=True),
    sa.Column('clock_frequency', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('microcontroller',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('core', sa.String(length=50), nullable=True),
    sa.Column('core_size', sa.String(length=30), nullable=True),
    sa.Column('speed', sa.String(length=30), nullable=True),
    sa.Column('flash_size', sa.String(length=30), nullable=True),
    sa.Column('ram_size', sa.String(length=30), nullable=True),
    sa.Column('peripherals', sa.String(length=250), nullable=True),
    sa.Column('connectivity', sa.String(length=250), nullable=True),
    sa.Column('voltage_supply', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('opamp',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gain_bandwith', sa.String(length=30), nullable=True),
    sa.Column('output_type', sa.String(length=50), nullable=True),
    sa.Column('input_type', sa.String(length=50), nullable=True),
    sa.Column('amplifier_type', sa.String(length=50), nullable=True),
    sa.Column('slew_rate', sa.String(length=30), nullable=True),
    sa.Column('voltage_supplies', sa.String(length=30), nullable=True),
    sa.Column('voltage_input_offset', sa.String(length=30), nullable=True),
    sa.Column('current_output', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('optocoupler_digital',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voltage_isolation', sa.String(length=30), nullable=True),
    sa.Column('voltage_saturation_max', sa.String(length=30), nullable=True),
    sa.Column('current_transfer_ratio_max', sa.String(length=30), nullable=True),
    sa.Column('current_transfer_ratio_min', sa.String(length=30), nullable=True),
    sa.Column('voltage_forward_typical', sa.String(length=30), nullable=True),
    sa.Column('voltage_output_max', sa.String(length=30), nullable=True),
    sa.Column('number_of_channels', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('optocoupler_linear',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voltage_isolation', sa.String(length=30), nullable=True),
    sa.Column('transfer_gain', sa.String(length=30), nullable=True),
    sa.Column('input_forward_voltage', sa.String(length=30), nullable=True),
    sa.Column('servo_gain', sa.String(length=30), nullable=True),
    sa.Column('forward_gain', sa.String(length=30), nullable=True),
    sa.Column('non_linearity', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('potentiometer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('power_max', sa.String(length=30), nullable=True),
    sa.Column('tolerance', sa.String(length=30), nullable=True),
    sa.Column('resistance_min', sa.String(length=30), nullable=True),
    sa.Column('resistance_max', sa.String(length=30), nullable=True),
    sa.Column('number_of_turns', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('power_inductor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tolerance', sa.String(length=30), nullable=True),
    sa.Column('resistance_dcr', sa.String(length=30), nullable=True),
    sa.Column('inductance_freq_test', sa.String(length=30), nullable=True),
    sa.Column('current_rating', sa.String(length=30), nullable=True),
    sa.Column('current_saturation', sa.String(length=30), nullable=True),
    sa.Column('core_material', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resistor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('power_max', sa.String(length=30), nullable=True),
    sa.Column('tolerance', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('switch_push_button',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('function', sa.String(length=50), nullable=True),
    sa.Column('dc_voltage_rating', sa.String(length=30), nullable=True),
    sa.Column('ac_voltage_rating', sa.String(length=30), nullable=True),
    sa.Column('current_rating', sa.String(length=30), nullable=True),
    sa.Column('circuit_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('switch_switch',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voltage_rating', sa.String(length=30), nullable=True),
    sa.Column('current_rating', sa.String(length=30), nullable=True),
    sa.Column('number_of_positions', sa.String(length=30), nullable=True),
    sa.Column('circuit_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transceiver',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('duplex', sa.String(length=30), nullable=True),
    sa.Column('data_rate', sa.String(length=30), nullable=True),
    sa.Column('protocol', sa.String(length=30), nullable=True),
    sa.Column('voltage_supply', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transistor_bjt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('vce_sat_max', sa.String(length=30), nullable=True),
    sa.Column('hfe', sa.String(length=30), nullable=True),
    sa.Column('vce_max', sa.String(length=30), nullable=True),
    sa.Column('ic_max', sa.String(length=50), nullable=True),
    sa.Column('power_max', sa.String(length=50), nullable=True),
    sa.Column('bjt_type', sa.String(length=10), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transistor_mosfet',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rds_on', sa.String(length=30), nullable=True),
    sa.Column('vgs_max', sa.String(length=30), nullable=True),
    sa.Column('vgs_th', sa.String(length=30), nullable=True),
    sa.Column('vds_max', sa.String(length=30), nullable=True),
    sa.Column('ids_max', sa.String(length=30), nullable=True),
    sa.Column('power_max', sa.String(length=30), nullable=True),
    sa.Column('channel_type', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('voltage_regulator_dcdc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voltage_input_min', sa.String(length=30), nullable=True),
    sa.Column('voltage_output_min_fixed', sa.String(length=30), nullable=True),
    sa.Column('voltage_output_max', sa.String(length=30), nullable=True),
    sa.Column('current_output', sa.String(length=30), nullable=True),
    sa.Column('frequency_switching', sa.String(length=30), nullable=True),
    sa.Column('topology', sa.String(length=50), nullable=True),
    sa.Column('output_type', sa.String(length=50), nullable=True),
    sa.Column('number_of_outputs', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('voltage_regulator_linear',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gain_bandwith', sa.String(length=50), nullable=True),
    sa.Column('output_type', sa.String(length=50), nullable=True),
    sa.Column('voltage_output_min_fixed', sa.String(length=30), nullable=True),
    sa.Column('voltage_output_max', sa.String(length=30), nullable=True),
    sa.Column('voltage_dropout_max', sa.String(length=30), nullable=True),
    sa.Column('current_supply_max', sa.String(length=30), nullable=True),
    sa.Column('current_output', sa.String(length=30), nullable=True),
    sa.Column('pssr', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('voltage_regulator_linear')
    op.drop_table('voltage_regulator_dcdc')
    op.drop_table('transistor_mosfet')
    op.drop_table('transistor_bjt')
    op.drop_table('transceiver')
    op.drop_table('switch_switch')
    op.drop_table('switch_push_button')
    op.drop_table('resistor')
    op.drop_table('power_inductor')
    op.drop_table('potentiometer')
    op.drop_table('optocoupler_linear')
    op.drop_table('optocoupler_digital')
    op.drop_table('opamp')
    op.drop_table('microcontroller')
    op.drop_table('memory')
    op.drop_table('led_indicator')
    op.drop_table('ferrite_bead')
    op.drop_table('diode_zener')
    op.drop_table('diode_tvs')
    op.drop_table('diode_rectifier')
    op.drop_table('crystal_oscillator')
    op.drop_table('connector_pcb')
    op.drop_table('component_footprint_asc')
    op.drop_table('capacitor')
    op.drop_index(op.f('ix_component_mpn'), table_name='component')
    op.drop_index(op.f('ix_component_manufacturer'), table_name='component')
    op.drop_table('component')
    op.drop_table('library_ref')
    op.drop_table('footprint_ref')
    # ### end Alembic commands ###
